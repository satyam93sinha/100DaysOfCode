https://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/529/week-2/3293/
https://www.geeksforgeeks.org/diameter-of-a-binary-tree/

BEST APPROACH:
Approach #1: Depth-First Search [Accepted]
Intuition

Any path can be written as two arrows (in different directions) from some node, where an arrow is a path that starts at some node and only travels down to child nodes.

If we knew the maximum length arrows L, R for each child, then the best path touches L + R + 1 nodes.

Algorithm

Let's calculate the depth of a node in the usual way: max(depth of node.left, depth of node.right) + 1.
While we do, a path "through" this node uses 1 + (depth of node.left) + (depth of node.right) nodes.
Let's search each node and remember the highest number of nodes used in some path. The desired length is 1 minus this number.

class Solution(object):
    def diameterOfBinaryTree(self, root):
        self.ans = 1
        def depth(node):
            if not node: return 0
            L = depth(node.left)
            R = depth(node.right)
            self.ans = max(self.ans, L+R+1)
            return max(L, R) + 1

        depth(root)
        return self.ans - 1

Complexity Analysis

Time Complexity: O(N). We visit every node once.

Space Complexity: O(N), the size of our implicit call stack during our depth-first search.

EASY TO UNDERSTAND:
My Implementation: Source: https://www.youtube.com/watch?v=fuPqnDs1HMw
Coding Ninjas Video Lecture

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        return self.diameterHeight(root)[1]
    
    def diameterHeight(self, root: TreeNode) -> tuple:
        if root==None:
            return ([0, 0])
        else:
            left = self.diameterHeight(root.left)
            right = self.diameterHeight(root.right)
            print(left, right)
            height = 1 + max(left[0], right[0])
            option1 = left[0] + right[0]
            option2 = left[1]
            option3 = right[1]
            diameter = max(option1, option2, option3)
            print("diameter, height:", diameter, height)
            return ([height, diameter])
