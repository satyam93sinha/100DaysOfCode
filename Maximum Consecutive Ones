Question: https://leetcode.com/explore/learn/card/fun-with-arrays/521/introduction/3238/

Hint: You need to think about two things as far as any window is concerned. One is the starting point for the window. 
How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window. 
How do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows 
of consecutive ones. All that remains afterward is to find the longest such window and return the size.

Starting point of the window: index 0.
Detecting a new window has started: reset count_ones = 0
Detecting a window has ended : check for the max value among max_consecutive_ones and count_ones and store it into max_consecutive_ones.

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        count_ones, max_consecutive_ones, i = 0, 0, 0
        while i < len(nums):
            if nums[i]==1:
                count_ones += 1
                max_consecutive_ones = max(max_consecutive_ones, count_ones)
            else:
                count_ones = 0
            i += 1
        return max_consecutive_ones
